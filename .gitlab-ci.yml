.before-script-build: &before-script-build
  - |
    if [[ ! -z "$CI_BUILD_PLATFORMS" ]]; then
      export OS_ARCH=$(echo $CI_BUILD_PLATFORMS | tr ' ' '\n' | \
      sed 's|\/||2' | sed 's|\/|-|' | tr '\n' ' ')
    fi
  - export CI_APP_REPO=${CI_APP_REPO:-$CI_REGISTRY_IMAGE}
  - >
    echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER
    --password-stdin $CI_REGISTRY
  - |
    if [[ -z "$IMAGE" ]]; then
      export IMAGE=$(sed -n "s|IMAGE=\(.*\)|\1|p" sample..env)
    fi
  - |
    if [[ -z "$GHC_VERSION" ]]; then
      export GHC_VERSION=$(sed -n "s|GHC_VERSION=\(.*\)|\1|p" sample..env)
    fi
  - |
    if [[ -z "$CABAL_VERSION_MIN" ]]; then
      export CABAL_VERSION_MIN=$(sed -n "s|CABAL_VERSION_MIN=\(.*\)|\1|p" sample..env)
    fi
  - |
    if [[ -z "$STACK_VERSION" ]]; then
      export STACK_VERSION_BUILD=$(sed -n "s|STACK_VERSION=\(.*\)|\1|p" sample..env)
    fi

.build:
  image: glcr.b-data.ch/docker/docker:dind
  stage: build
  services:
    - name: glcr.b-data.ch/docker/docker:dind
      alias: docker
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"
    BUILDX_NO_DEFAULT_ATTESTATIONS: "true"
  before_script:
    - *before-script-build

build:version-linux-amd64:
  extends: .build
  tags:
    - arch:amd64
    - os:linux
  script:
    - >
      docker build
      --build-arg IMAGE
      --build-arg GHC_VERSION
      --build-arg CABAL_VERSION_MIN
      --build-arg STACK_VERSION_BUILD
      -t $CI_APP_REPO:$STACK_VERSION_BUILD-linux-amd64
      -f build.Dockerfile .
    - docker push $CI_APP_REPO:$STACK_VERSION_BUILD-linux-amd64
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $CI_BUILD_PLATFORMS =~ /(linux\/amd64)/
      changes:
        - build.Dockerfile
        - sample..env

build:version-linux-arm64v8:
  extends: .build
  tags:
    - arch:arm64/v8
    - os:linux
  script:
    - >
      docker build
      --build-arg IMAGE
      --build-arg GHC_VERSION
      --build-arg CABAL_VERSION_MIN
      --build-arg STACK_VERSION_BUILD
      -t $CI_APP_REPO:$STACK_VERSION_BUILD-linux-arm64v8
      -f build.Dockerfile .
    - docker push $CI_APP_REPO:$STACK_VERSION_BUILD-linux-arm64v8
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $CI_BUILD_PLATFORMS =~ /(linux\/arm64\/v8)/
      changes:
        - build.Dockerfile
        - sample..env

build-manifest:version-linux-multiarch:
  extends: .build
  needs: ["build:version-linux-amd64", "build:version-linux-arm64v8"]
  script:
    - |
      for i in $OS_ARCH; do
        export CI_MANIFEST_LIST="$CI_MANIFEST_LIST $CI_APP_REPO:$STACK_VERSION_BUILD-$i"
      done
    - |
      docker manifest create $CI_APP_REPO:$STACK_VERSION_BUILD $CI_MANIFEST_LIST
      if echo $OS_ARCH | grep "linux-arm64v8" >/dev/null ; then
        docker manifest annotate --variant v8 $CI_APP_REPO:$STACK_VERSION_BUILD \
          $CI_APP_REPO:$STACK_VERSION_BUILD-linux-arm64v8
      fi
      docker manifest push $CI_APP_REPO:$STACK_VERSION_BUILD
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      changes:
        - build.Dockerfile
        - sample..env
